worker_processes 1;

events
{
    worker_connections  1024;
}

http
{
    include       mime.types;
    default_type  application/octet-stream;
	
    sendfile        on;	
	
    keepalive_timeout  65;
		
	charset utf-8;
	
	upstream backend
	{
        server localhost:5001 weight=2;
        server localhost:5002;
        server localhost:5003;
    }
	
	upstream mirror_backend
	{
        server localhost:5005;
    }
	
	root html/static;
	
	access_log html/static/access.log;
    error_log html/static/error.log;
	
	proxy_cache_path html/static/cache levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=60m use_temp_path=off;
	
	server
	{
		listen 80;
        server_name  localhost;
		
		gzip on;
        gzip_types text/plain application/json application/xml;
		
        proxy_cache my_cache;
        proxy_cache_methods GET;
		
		location /api/v1
		{
            add_header 'Access-Control-Allow-Origin' 'http://localhost:4200' always;
			add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Max-Age' '3600' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
            #add_header 'Access-Control-Allow-Headers' '*' always;
            add_header 'Access-Control-Allow-Headers' 'content-type' always;
            
            if ($request_method = OPTIONS) {
                return 200;
            }
			
			proxy_pass https://backend/api/v1;
		}
		
		location /
		{
            root   html/static;
            index  index.html;
        }
		location /mirror
		{
            rewrite ^/mirror/api/v1(.*)$ /mirrorapi$1 last;
            rewrite ^/mirror/(.*)$ /$1 last;
            rewrite ^/mirror$ / last;
		}
		location /mirrorapi
		{
			internal;
			proxy_pass https://mirror_backend/api/v1;
		}
		
        location /test/
		{
            rewrite ^/test(.*)$ $1 last;
        }
        location = /test
		{
			rewrite ^/test$ / last;
		}
		
        location /admin
		{
            proxy_pass http://localhost:8080/;
        }
		
		location = /status
		{
			stub_status;
		}
		
		error_page   500 502 503 504  /50x.html;
        location = /50x.html
		{
            root   html/static;
        }
	}
	
	#Прокси сервер
	#server
	#{
	#	listen 9000;
	#	root data/up1;

	#	location /
	#	{
	#		index ProxyTest.html;
	#	}
	#}
}
